import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

// Database connection details
class DBConfig {
    public static final String URL = "jdbc:mysql://localhost:3306/lop_hoc";
    public static final String USER = "root";
    public static final String PASSWORD = "password"; // Replace with your actual password
}

// Class for JDBC connectivity
class DatabaseConnection {
    private static Connection connection;

    public static Connection getConnection() throws SQLException {
        if (connection == null) {
            connection = DriverManager.getConnection(DBConfig.URL, DBConfig.USER, DBConfig.PASSWORD);
        }
        return connection;
    }
}

// Class for CRUD operations
class ClassManager {
    // ... (addClass, updateClass, deleteClass, getClassData methods are the same) 
}

// Login Form
class LoginForm extends JFrame implements ActionListener {
    JTextField emailField;
    JPasswordField passwordField;
    JButton loginButton;

    LoginForm() {
        setTitle("Login");
        setSize(300, 200);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(3, 2));

        JLabel emailLabel = new JLabel("Email:");
        JLabel passwordLabel = new JLabel("Password:");
        emailField = new JTextField();
        passwordField = new JPasswordField();
        loginButton = new JButton("Login");
        loginButton.addActionListener(this);

        add(emailLabel);
        add(emailField);
        add(passwordLabel);
        add(passwordField);
        add(new JLabel());
        add(loginButton);

        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String email = emailField.getText();
        String password = new String(passwordField.getPassword());

        // Check if email and password are entered
        if (email.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter email and password.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check email format
        if (!email.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$")) {
            JOptionPane.showMessageDialog(this, "Invalid email format.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if email matches the pattern "minhnv@huce.edu.vn" and password matches student ID
        String studentName = email.substring(0, email.indexOf('@'));
        String expectedPassword = studentName.substring(studentName.length() - 5);

        if (email.endsWith("@huce.edu.vn") && password.equals(expectedPassword)) {
            // Open class management form
            new ClassManagementForm();
            dispose(); // Close the login form
        } else {
            JOptionPane.showMessageDialog(this, "Invalid email or password.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}

// Class Management Form
class ClassManagementForm extends JFrame implements ActionListener {
    JTextField maLopField, tenLopField, khoaField;
    JButton addButton, updateButton, deleteButton, refreshButton, logoutButton;
    JTable classTable;
    DefaultTableModel tableModel;
    ClassManager classManager;

    ClassManagementForm() {
        setTitle("Class Management");
        setSize(800, 600); // Adjusted size for better table visibility
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel(new GridLayout(4, 2));
        JLabel maLopLabel = new JLabel("Mã Lớp:");
        JLabel tenLopLabel = new JLabel("Tên Lớp:");
        JLabel khoaLabel = new JLabel("Khoa:");
        maLopField = new JTextField();
        tenLopField = new JTextField();
        khoaField = new JTextField();

        inputPanel.add(maLopLabel);
        inputPanel.add(maLopField);
        inputPanel.add(tenLopLabel);
        inputPanel.add(tenLopField);
        inputPanel.add(khoaLabel);
        inputPanel.add(khoaField);

        addButton = new JButton("Thêm");
        addButton.addActionListener(this);
        updateButton = new JButton("Sửa");
        updateButton.addActionListener(this);
        deleteButton = new JButton("Xóa");
        deleteButton.addActionListener(this);
        refreshButton = new JButton("Làm mới");
        refreshButton.addActionListener(this);
        logoutButton = new JButton("Đăng Xuất");
        logoutButton.addActionListener(this);

        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.add(addButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(refreshButton);
        buttonPanel.add(logoutButton);

        classTable = new JTable();
        tableModel = new DefaultTableModel();
        classTable.setModel(tableModel);
        JScrollPane scrollPane = new JScrollPane(classTable);

        add(inputPanel, BorderLayout.NORTH);
        add(buttonPanel, BorderLayout.SOUTH);
        add(scrollPane, BorderLayout.CENTER); 

        classManager = new ClassManager();

        loadClassData(); // Load data when the form starts

        setVisible(true);
    }

    private void loadClassData() {
        try {
            tableModel = classManager.getClassData();
            classTable.setModel(tableModel);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading class data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == addButton) {
            String maLop = maLopField.getText();
            String tenLop = tenLopField.getText();
            String khoa = khoaField.getText();
            String nguoiTao = "minhnv@huce.edu.vn"; // Replace with the actual email

            // Validate required fields
            if (maLop.isEmpty() || tenLop.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter Mã Lớp and Tên Lớp.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                classManager.addClass(maLop, tenLop, khoa, nguoiTao);
                loadClassData();
                JOptionPane.showMessageDialog(this, "Class added successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error adding class: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (e.getSource() == updateButton) {
            String maLop = maLopField.getText();
            String tenLop = tenLopField.getText();
            String khoa = khoaField.getText();

            if (maLop.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter Mã Lớp to update.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                classManager.updateClass(maLop, tenLop, khoa);
                loadClassData(); // Refresh table data
                JOptionPane.showMessageDialog(this, "Class updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error updating class: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

        } else if (e.getSource() == deleteButton) {
            String maLop = maLopField.getText();

            if (maLop.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter Mã Lớp to delete.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                classManager.deleteClass(maLop);
                loadClassData(); // Refresh table data
                JOptionPane.showMessageDialog(this, "Class deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error deleting class: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (e.getSource() == refreshButton) {
            loadClassData();
        } else if (e.getSource() == logoutButton) {
            new LoginForm();
            dispose(); // Close the current form
        }
    }
}

public class Main {
    public static void main(String[] args) {
        new LoginForm();
    }
}
